{"version":3,"sources":["../source/GitHubSDK.js"],"names":["PACKAGE","require","GitHubSDK","token","undefined","Error","message","urls","api","search_users","users","headers","Authorization","Accept","userAgent","version","props","owner","repo","path","content","branch","validate","error","value","options","method","body","JSON","stringify","url","response","json","ok","status","statusText","name","org","description","homepage","keywordsList","keywords","Array","isArray","promises","map","keyword","searchForUser","Promise","all","encodeURIComponent","user","items","userLogin","login","blog","email","avatar_url","gravatar_id","company","fail"],"mappings":"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","file":"GitHubSDK.js","sourcesContent":["import fs from 'fs';\nimport 'babel-polyfill';\nimport Joi from 'joi';\nimport fetch from 'isomorphic-fetch';\nimport { Base64 } from 'js-base64';\nimport ErrorServerResponse from './ErrorServerResponse';\nimport ValidationError from './ValidationError';\n\nimport uploadSchema from './schema/upload.js';\nimport createSchema from './schema/create.js';\n\nconst PACKAGE = require('../package.json');\n\n/**\n * SDK for GitHub API\n *\n * @namespace GitHubSDK\n * @class\n * @param {string} token - github app token\n * @see https://developer.github.com/v3/\n */\nexport default class GitHubSDK {\n  /**\n   * Constructor, also save GitHub api token\n   * @param {string} token - github app token\n   */\n  constructor(token) {\n\n    if (token === undefined) throw new Error(GitHubSDK.message.token);\n\n    this.urls = {\n      api: 'https://api.github.com/',\n      search_users: 'search/users',\n      users: 'users/',\n    };\n\n    this.headers = {\n      Authorization: `token ${ token }`,\n      Accept: 'application/vnd.github.v3+json',\n      userAgent: `UserCrowler/${ PACKAGE.version }`,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Messages of GitHub SDK\n   * @inner\n   * @type {Object}\n   */\n  static message = {\n    token: 'You need to pass your app token',\n    fail: 'Failed fetching page',\n  };\n\n  /**\n   * Uload file to repository\n   * @namespace GitHubSDK\n   * @method upload\n   *\n   * @throws {ValidationError}                    - Error of fields validation\n   * @throws {ErrorServerResponse}                - Server error\n   * @param  {Object}  props                      - upload props\n   * @param  {string}  props.owner                - organization or user name\n   * @param  {string}  props.repo                 - repository name\n   * @param  {string}  props.path                 - relative file path with file name in it\n   * @param  {string}  props.message              - commit message\n   * @param  {string}  props.content              - base64 encoded content\n   * @param  {string}  [props.branch='master']    - name of the branch\n   * @return {Promise<Content>}                   - uploaded content data\n   *\n   * @example <caption>Upload binary file</caption>\n   * (async()=>{\n   *   try {\n   *     const github = new GitHubSDK('b8f921864bd9a9fb6585b10e6534baa37c4d45fe');\n   *     const image = fs.readFileSync('/path/image.jpg', 'base64');\n   *     const content = await github.upload({\n   *       owner: 'FrontenderMagazine',\n   *       repo: 'article',\n   *       path: 'images/image.jpg',\n   *       message: 'Uploaded image.jpg',\n   *       content: image,\n   *     });\n   *   } catch (error) {\n   *     console.log(error.message);\n   *   }\n   * })();\n   *\n   * @example <caption>Upload text file</caption>\n   * (async()=>{\n   *   try {\n   *     const github = new GitHubSDK('b8f921864bd9a9fb6585b10e6534baa37c4d45fe');\n   *     const readme = Base64.btoa('# Title');\n   *     const content = await github.upload({\n   *       owner: 'FrontenderMagazine',\n   *       repo: 'article',\n   *       path: 'README.md',\n   *       message: 'Uploaded README.md',\n   *       content: readme,\n   *     });\n   *   } catch (error) {\n   *     console.log(error.message);\n   *   }\n   * })();\n   */\n  async upload(props) {\n\n    const {\n      owner,\n      repo,\n      path,\n      message,\n      content,\n      branch,\n    } = props;\n\n    Joi.validate({\n      owner,\n      repo,\n      path,\n      message,\n      content,\n      branch,\n    }, uploadSchema, (error, value) => {\n      if (error !== null) throw error;\n    });\n\n    const options = {\n      method: 'PUT',\n      headers: {\n        ...this.headers,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: JSON.stringify({\n        path,\n        message,\n        content,\n        branch,\n      }),\n    };\n\n    const url = `${this.urls.api}repos/${owner}/${repo}/contents/${path}`;\n    const response = await fetch(url, options);\n    const json = await response.json();\n    if (response.ok) return json;\n    throw new ErrorServerResponse(response.status, response.statusText, json);\n  }\n\n  /**\n   * Create repository in the organization\n   * @namespace GitHubSDK\n   * @method create\n   *\n   * @throws {ValidationError}                        - Error of fields validation\n   * @throws {ErrorServerResponse}                    - Server error\n   * @param  {Object}  props                          - Options\n   * @param  {string}  props.name                     - Repository name\n   * @param  {string}  [props.description=null]       - Repository description\n   * @param  {string}  [props.homepage=null]          - Link to some related resourse\n   * @param  {string}  [props.org]                    - Organization name\n   * @return {Promise<Repository>}                    - Repository object\n   */\n  async create(props) {\n\n    const {\n      name,\n      org,\n      description,\n      homepage,\n    } = props;\n\n    Joi.validate({\n      name,\n      org,\n      description,\n      homepage,\n    }, createSchema, (error, value) => {\n      if (error !== null) throw error;\n    });\n\n    const options = {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name,\n        description,\n        homepage,\n      }),\n    };\n\n    const url = `${this.urls.api}orgs/${org}/repos`;\n    const response = await fetch(url, options);\n    const json = await response.json();\n    if (response.ok) return json;\n    throw new ErrorServerResponse(response.status, response.statusText, json);\n  }\n\n  /**\n   * Search for users\n   * @namespace GitHubSDK\n   * @method searchForUsers\n   *\n   * @param {Array} keywords\n   * @return {Promise}\n   */\n  searchForUsers(keywordsList) {\n    const keywords = (!Array.isArray(keywordsList) && typeof keywordsList === 'string') ? new Array(keywordsList) : keywordsList;\n    const promises = keywords.map((keyword)=>this.searchForUser(keyword));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Search for user\n   * @namespace GitHubSDK\n   * @method searchForUser\n   *\n   * @param {String} keyword\n   * @return {Promise}\n   */\n  async searchForUser(keyword) {\n    const options = {\n      method: 'GET',\n      headers: this.headers,\n    };\n    const response = await fetch(`${this.urls.api + this.urls.search_users  }?q=${encodeURIComponent(keyword)}`, options);\n    if (response.ok) {\n      const user = await response.json();\n      return user.items;\n    }\n    throw new Error(`${response.status} ${response.statusText}`);\n  }\n\n  /**\n   * Get user information\n   * @namespace GitHubSDK\n   * @method getUser\n   *\n   * @param {String} login\n   * @return {Promise}\n   */\n  async getUser(userLogin) {\n    const options = {\n      method: 'GET',\n      headers: this.headers,\n    };\n    const url = `${this.urls.api}${this.urls.users}${encodeURIComponent(userLogin)}`;\n    const response = await fetch(url, options);\n    if (!response.ok) throw new Error(`${response.status} ${response.statusText}`);\n    const json = await response.json();\n    const { login, blog, name, email, avatar_url, gravatar_id, company } = json;\n    return { login, blog, name, email, avatar_url, gravatar_id, company };\n  }\n\n  /**\n   * Content object\n   *\n   * @namespace GitHubSDK\n   * @typedef {Content} Content representation\n   * @see https://developer.github.com/v3/repos/contents/#response-2\n   */\n\n\n  /**\n   * Repository object\n   *\n   * @namespace GitHubSDK\n   * @typedef {Repository} Repository representation\n   * @see https://developer.github.com/v3/repos/#response-2\n   */\n}\n"]}