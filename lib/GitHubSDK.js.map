{"version":3,"sources":["../source/GitHubSDK.js"],"names":["PACKAGE","require","GitHubSDK","token","undefined","Error","message","urls","api","search_users","users","headers","Authorization","Accept","userAgent","version","props","owner","repo","path","content","branch","validate","error","value","options","method","body","JSON","stringify","url","response","json","ok","status","statusText","name","org","description","homepage","keywordsList","keywords","Array","isArray","promises","map","keyword","searchForUser","Promise","all","encodeURIComponent","user","items","userLogin","login","blog","email","avatar_url","gravatar_id","company","fail"],"mappings":"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","file":"GitHubSDK.js","sourcesContent":["import fs from 'fs';\nimport 'babel-polyfill';\nimport Joi from 'joi';\nimport fetch from 'isomorphic-fetch';\nimport { Base64 } from 'js-base64';\nimport ErrorServerResponse from './ErrorServerResponse';\nimport ValidationError from './ValidationError';\n\nimport uploadSchema from './schema/upload.js';\nimport createSchema from './schema/create.js';\n\nconst PACKAGE = require('../package.json');\n\n/**\n * SDK for GitHub API\n *\n * @namespace GitHubSDK\n * @class\n * @param {string} token - github app token\n * @see https://developer.github.com/v3/\n */\nexport default class GitHubSDK {\n  /**\n   * Constructor, also save GitHub api token\n   * @param {string} token - github app token\n   */\n  constructor(token) {\n\n    if (token === undefined) throw new Error(GitHubSDK.message.token);\n\n    this.urls = {\n      api: 'https://api.github.com/',\n      search_users: 'search/users',\n      users: 'users/',\n    };\n\n    this.headers = {\n      Authorization: `token ${ token }`,\n      Accept: 'application/vnd.github.v3+json',\n      userAgent: `UserCrowler/${ PACKAGE.version }`,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Messages of GitHub SDK\n   * @inner\n   * @type {Object}\n   */\n  static message = {\n    token: 'You need to pass your app token',\n    fail: 'Failed fetching page',\n  };\n\n  /**\n   * Uload file to repository\n   * @namespace GitHubSDK\n   * @method upload\n   * @inner\n   *\n   * @throws {ValidationError}                    - Error of fields validation\n   * @throws {ErrorServerResponse}                - Server error\n   * @param  {Object}  props                      - upload props\n   * @param  {string}  props.owner                - organization or user name\n   * @param  {string}  props.repo                 - repository name\n   * @param  {string}  props.path                 - relative file path with file name in it\n   * @param  {string}  props.message              - commit message\n   * @param  {string}  props.content              - base64 encoded content\n   * @param  {string}  [props.branch='master']    - name of the branch\n   * @return {Promise<Content>}                   - uploaded content data\n   *\n   * @example <caption>Upload binary file</caption>\n   * import fs from 'fs';\n   * import GitHubSDK from '@frontender-magazine/github-sdk';\n   * (async()=>{\n   *   try {\n   *     const github = new GitHubSDK('b8f921864bd9a9fb6585b10e6534baa37c4d45fe');\n   *     const image = fs.readFileSync('/path/image.jpg', 'base64');\n   *     const content = await github.upload({\n   *       owner: 'FrontenderMagazine',\n   *       repo: 'article',\n   *       path: 'images/image.jpg',\n   *       message: 'Uploaded image.jpg',\n   *       content: image,\n   *     });\n   *   } catch (error) {\n   *     console.log(error.message);\n   *   }\n   * })();\n   *\n   * @example <caption>Upload text file</caption>\n   * import { Base64 } from 'js-base64';\n   * import GitHubSDK from '@frontender-magazine/github-sdk';\n   * (async()=>{\n   *   try {\n   *     const github = new GitHubSDK('b8f921864bd9a9fb6585b10e6534baa37c4d45fe');\n   *     const readme = Base64.btoa('# Title');\n   *     const content = await github.upload({\n   *       owner: 'FrontenderMagazine',\n   *       repo: 'article',\n   *       path: 'README.md',\n   *       message: 'Uploaded README.md',\n   *       content: readme,\n   *     });\n   *   } catch (error) {\n   *     console.log(error.message);\n   *   }\n   * })();\n   */\n  async upload(props) {\n\n    const {\n      owner,\n      repo,\n      path,\n      message,\n      content,\n      branch,\n    } = props;\n\n    Joi.validate({\n      owner,\n      repo,\n      path,\n      message,\n      content,\n      branch,\n    }, uploadSchema, (error, value) => {\n      if (error !== null) throw error;\n    });\n\n    const options = {\n      method: 'PUT',\n      headers: {\n        ...this.headers,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: JSON.stringify({\n        path,\n        message,\n        content,\n        branch,\n      }),\n    };\n\n    const url = `${this.urls.api}repos/${owner}/${repo}/contents/${path}`;\n    const response = await fetch(url, options);\n    const json = await response.json();\n    if (response.ok) return json;\n    throw new ErrorServerResponse(response.status, response.statusText, json);\n  }\n\n  /**\n   * Create repository in the organization\n   * @namespace GitHubSDK\n   * @method create\n   * @inner\n   *\n   * @throws {ValidationError}                        - Error of fields validation\n   * @throws {ErrorServerResponse}                    - Server error\n   * @param  {Object}  props                          - Options\n   * @param  {string}  props.name                     - Repository name\n   * @param  {string}  [props.description=null]       - Repository description\n   * @param  {string}  [props.homepage=null]          - Link to some related resourse\n   * @param  {string}  [props.org]                    - Organization name\n   * @return {Promise<Repository>}                    - Repository object\n   */\n  async create(props) {\n\n    const {\n      name,\n      org,\n      description,\n      homepage,\n    } = props;\n\n    Joi.validate({\n      name,\n      org,\n      description,\n      homepage,\n    }, createSchema, (error, value) => {\n      if (error !== null) throw error;\n    });\n\n    const options = {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name,\n        description,\n        homepage,\n      }),\n    };\n\n    const url = `${this.urls.api}orgs/${org}/repos`;\n    const response = await fetch(url, options);\n    const json = await response.json();\n    if (response.ok) return json;\n    throw new ErrorServerResponse(response.status, response.statusText, json);\n  }\n\n  /**\n   * Search for users\n   * @namespace GitHubSDK\n   * @method searchForUsers\n   * @inner\n   *\n   * @param {Array} keywords\n   * @return {Promise}\n   */\n  searchForUsers(keywordsList) {\n    const keywords = (!Array.isArray(keywordsList) && typeof keywordsList === 'string') ? new Array(keywordsList) : keywordsList;\n    const promises = keywords.map((keyword)=>this.searchForUser(keyword));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Search for user\n   * @namespace GitHubSDK\n   * @method searchForUser\n   * @inner\n   *\n   * @param {String} keyword\n   * @return {Promise}\n   */\n  async searchForUser(keyword) {\n    const options = {\n      method: 'GET',\n      headers: this.headers,\n    };\n    const response = await fetch(`${this.urls.api + this.urls.search_users  }?q=${encodeURIComponent(keyword)}`, options);\n    if (response.ok) {\n      const user = await response.json();\n      return user.items;\n    }\n    throw new Error(`${response.status} ${response.statusText}`);\n  }\n\n  /**\n   * Get user information\n   * @namespace GitHubSDK\n   * @method getUser\n   * @inner\n   *\n   * @param {String} login\n   * @return {Promise}\n   */\n  async getUser(userLogin) {\n    const options = {\n      method: 'GET',\n      headers: this.headers,\n    };\n    const url = `${this.urls.api}${this.urls.users}${encodeURIComponent(userLogin)}`;\n    const response = await fetch(url, options);\n    if (!response.ok) throw new Error(`${response.status} ${response.statusText}`);\n    const json = await response.json();\n    const { login, blog, name, email, avatar_url, gravatar_id, company } = json;\n    return { login, blog, name, email, avatar_url, gravatar_id, company };\n  }\n\n  /**\n   * Content object\n   *\n   * @namespace GitHubSDK\n   * @typedef {Content} Content representation\n   * @see https://developer.github.com/v3/repos/contents/#response-2\n   */\n\n\n  /**\n   * Repository object\n   *\n   * @namespace GitHubSDK\n   * @typedef {Repository} Repository representation\n   * @see https://developer.github.com/v3/repos/#response-2\n   */\n}\n"]}