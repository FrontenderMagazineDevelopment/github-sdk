{"version":3,"sources":["../source/GitHubSDK.js"],"names":["PACKAGE","require","GitHubSDK","token","config","org","urls","api","search_users","users","headers","Authorization","process","env","GITHUB_SECRET_TOKEN","Accept","userAgent","version","name","desription","homepage","options","method","body","JSON","stringify","url","console","log","response","json","ok","status","statusText","keywordsList","keywords","Array","isArray","promises","map","keyword","searchForUser","Promise","all","encodeURIComponent","user","items","Error","userLogin","login","blog","email","avatar_url","gravatar_id","company","message","key","fail"],"mappings":"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","file":"GitHubSDK.js","sourcesContent":["import 'babel-polyfill';\nimport fetch from 'isomorphic-fetch';\nimport ErrorServerResponse from './ErrorServerResponse';\n\nconst PACKAGE = require('../package.json');\n\n/**\n * SDK for mercury api\n *\n * @namespace GitHubSDK\n * @class\n * @param {string} token - github app token\n * @see https://developer.github.com/v3/\n */\nexport default class GitHubSDK {\n  /**\n   * Constructor, save mercury api key\n   * @param {string} token - github app token\n   */\n  constructor(token) {\n\n    this.config = {\n      org: 'FrontenderMagazineDevelopment'\n    };\n\n    this.urls = {\n      api: 'https://api.github.com/',\n      search_users: 'search/users',\n      users: 'users/',\n    };\n\n    this.headers = {\n      Authorization: `token ${ token || process.env.GITHUB_SECRET_TOKEN }`,\n      Accept: 'application/vnd.github.v3+json',\n      userAgent: `UserCrowler/${ PACKAGE.version }`,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Messages of mercury SDK\n   * @namespace GitHubSDK\n   * @type {Object}\n   */\n  static message = {\n    key: 'You need API key',\n    fail: 'Failed fetching page',\n  };\n\n  /**\n   * Create repository in the organization\n   * @namespace GitHubSDK\n   *\n   * @param  {string}  name                  Repository name\n   * @param  {string}  [desription=null]     Repository description\n   * @param  {string}  [homepage=null]       Link to some related resourse\n   * @param  {string}  [org=this.config.org] Organization name\n   * @return {Promise<Repository>}                 Repository object\n   */\n  async create({\n    name,\n    desription = null,\n    homepage = null,\n    org = this.config.org,\n  }) {\n    const options = {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name,\n        desription,\n        homepage,\n      }),\n    };\n    const url = `${this.urls.api}orgs/${this.config.org}/repos`;\n    console.log(this.headers, url);\n    const response = await fetch(url, options);\n    const json = await response.json();\n    console.log(json);\n    if (!response.ok) {\n      throw new ErrorServerResponse(response.status, response.statusText, json);\n    }\n    return json;\n  }\n\n  /**\n   * Repository object\n   *\n   * @namespace GitHubSDK\n   * @typedef {Repository} Repository representation\n   * @see https://developer.github.com/v3/repos/#response-2\n   */\n\n  /**\n   * Search for users\n   * @namespace GitHubSDK\n   *\n   * @param {Array} keywords\n   * @return {Promise}\n   */\n  searchForUsers(keywordsList) {\n    const keywords = (!Array.isArray(keywordsList) && typeof keywordsList === 'string') ? new Array(keywordsList) : keywordsList;\n    const promises = keywords.map((keyword)=>this.searchForUser(keyword));\n    return Promise.all(promises);\n  }\n\n\n  /**\n   * Search for users\n   * @namespace GitHubSDK\n   *\n   * @param {Array} keywords\n   * @return {Promise}\n   */\n  searchForUsers(keywordsList) {\n    const keywords = (!Array.isArray(keywordsList) && typeof keywordsList === 'string') ? new Array(keywordsList) : keywordsList;\n    const promises = keywords.map((keyword)=>this.searchForUser(keyword));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Search for user\n   * @namespace GitHubSDK\n   *\n   * @param {String} keyword\n   * @return {Promise}\n   */\n  async searchForUser(keyword) {\n    const options = {\n      method: 'GET',\n      headers: this.headers,\n    };\n    const response = await fetch(`${this.urls.api + this.urls.search_users  }?q=${encodeURIComponent(keyword)}`, options);\n    if (response.ok) {\n      const user = await response.json();\n      return user.items;\n    }\n    throw new Error(`${response.status} ${response.statusText}`);\n  }\n\n  /**\n   * Get user information\n   * @namespace GitHubSDK\n   *\n   * @param {String} login\n   * @return {Promise}\n   */\n  async getUser(userLogin) {\n    const options = {\n      method: 'GET',\n      headers: this.headers,\n    };\n    const url = `${this.urls.api}${this.urls.users}${encodeURIComponent(userLogin)}`;\n    const response = await fetch(url, options);\n    if (!response.ok) throw new Error(`${response.status} ${response.statusText}`);\n    const json = await response.json();\n    const { login, blog, name, email, avatar_url, gravatar_id, company } = json;\n    return { login, blog, name, email, avatar_url, gravatar_id, company };\n  }\n\n}\n"]}