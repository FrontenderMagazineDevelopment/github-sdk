{"version":3,"sources":["../source/GitHubSDK.js"],"names":["PACKAGE","require","GitHubSDK","token","undefined","Error","message","key","urls","api","search_users","users","headers","Authorization","Accept","userAgent","version","name","org","description","homepage","trim","length","options","method","body","JSON","stringify","url","response","json","ok","status","statusText","keywordsList","keywords","Array","isArray","promises","map","keyword","searchForUser","Promise","all","encodeURIComponent","user","items","userLogin","login","blog","email","avatar_url","gravatar_id","company","fail"],"mappings":"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","file":"GitHubSDK.js","sourcesContent":["import 'babel-polyfill';\nimport fetch from 'isomorphic-fetch';\nimport ErrorServerResponse from './ErrorServerResponse';\n\nconst PACKAGE = require('../package.json');\n\n/**\n * SDK for mercury api\n *\n * @namespace GitHubSDK\n * @class\n * @param {string} token - github app token\n * @see https://developer.github.com/v3/\n */\nexport default class GitHubSDK {\n  /**\n   * Constructor, save mercury api key\n   * @param {string} token - github app token\n   */\n  constructor(token) {\n\n    if (token === undefined) throw new Error(GitHubSDK.message.key);\n\n    this.urls = {\n      api: 'https://api.github.com/',\n      search_users: 'search/users',\n      users: 'users/',\n    };\n\n    this.headers = {\n      Authorization: `token ${ token }`,\n      Accept: 'application/vnd.github.v3+json',\n      userAgent: `UserCrowler/${ PACKAGE.version }`,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Messages of mercury SDK\n   * @namespace GitHubSDK\n   * @type {Object}\n   */\n  static message = {\n    key: 'You need to pass your app token',\n    fail: 'Failed fetching page',\n    org: 'Organization name missing in the arguments list',\n    name: 'Repository name missing in the arguments list',\n  };\n\n  /**\n   * Create repository in the organization\n   * @namespace GitHubSDK\n   *\n   * @param  {string}  name                  Repository name\n   * @param  {string}  [description=null]     Repository description\n   * @param  {string}  [homepage=null]       Link to some related resourse\n   * @param  {string}  [org=this.config.org] Organization name\n   * @return {Promise<Repository>}           Repository object\n   */\n  async create({\n    name,\n    org,\n    description = null,\n    homepage = null,\n  }) {\n\n    if (typeof name !== 'string' || name.trim().length === 0) throw new Error(GitHubSDK.message.name);\n    if (typeof org !== 'string' || org.trim().length === 0) throw new Error(GitHubSDK.message.org);\n\n    const options = {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name,\n        description,\n        homepage,\n      }),\n    };\n\n    const url = `${this.urls.api}orgs/${org}/repos`;\n    const response = await fetch(url, options);\n    const json = await response.json();\n    if (!response.ok) {\n      throw new ErrorServerResponse(response.status, response.statusText, json);\n    }\n    return json;\n  }\n\n  /**\n   * Repository object\n   *\n   * @namespace GitHubSDK\n   * @typedef {Repository} Repository representation\n   * @see https://developer.github.com/v3/repos/#response-2\n   */\n\n  /**\n   * Search for users\n   * @namespace GitHubSDK\n   *\n   * @param {Array} keywords\n   * @return {Promise}\n   */\n  searchForUsers(keywordsList) {\n    const keywords = (!Array.isArray(keywordsList) && typeof keywordsList === 'string') ? new Array(keywordsList) : keywordsList;\n    const promises = keywords.map((keyword)=>this.searchForUser(keyword));\n    return Promise.all(promises);\n  }\n\n\n  /**\n   * Search for users\n   * @namespace GitHubSDK\n   *\n   * @param {Array} keywords\n   * @return {Promise}\n   */\n  searchForUsers(keywordsList) {\n    const keywords = (!Array.isArray(keywordsList) && typeof keywordsList === 'string') ? new Array(keywordsList) : keywordsList;\n    const promises = keywords.map((keyword)=>this.searchForUser(keyword));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Search for user\n   * @namespace GitHubSDK\n   *\n   * @param {String} keyword\n   * @return {Promise}\n   */\n  async searchForUser(keyword) {\n    const options = {\n      method: 'GET',\n      headers: this.headers,\n    };\n    const response = await fetch(`${this.urls.api + this.urls.search_users  }?q=${encodeURIComponent(keyword)}`, options);\n    if (response.ok) {\n      const user = await response.json();\n      return user.items;\n    }\n    throw new Error(`${response.status} ${response.statusText}`);\n  }\n\n  /**\n   * Get user information\n   * @namespace GitHubSDK\n   *\n   * @param {String} login\n   * @return {Promise}\n   */\n  async getUser(userLogin) {\n    const options = {\n      method: 'GET',\n      headers: this.headers,\n    };\n    const url = `${this.urls.api}${this.urls.users}${encodeURIComponent(userLogin)}`;\n    const response = await fetch(url, options);\n    if (!response.ok) throw new Error(`${response.status} ${response.statusText}`);\n    const json = await response.json();\n    const { login, blog, name, email, avatar_url, gravatar_id, company } = json;\n    return { login, blog, name, email, avatar_url, gravatar_id, company };\n  }\n\n}\n"]}