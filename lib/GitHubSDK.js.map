{"version":3,"sources":["../source/GitHubSDK.js"],"names":["PACKAGE","require","GitHubSDK","token","validate","error","urls","api","headers","Authorization","Accept","userAgent","version","props","owner","repo","path","message","content","branch","options","method","body","JSON","stringify","url","response","json","status","statusText","ok","name","org","description","homepage","keywordsList","keywords","Array","isArray","promises","map","searchForUser","keyword","Promise","all","encodeURIComponent","login"],"mappings":"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","file":"GitHubSDK.js","sourcesContent":["import 'babel-polyfill';\nimport Joi from 'joi';\nimport fetch from 'isomorphic-fetch';\nimport ErrorServerResponse from './ErrorServerResponse';\n\nimport keywordsSchema from './schema/keywordsSchema';\nimport constructorSchema from './schema/constructorSchema';\nimport uploadSchema from './schema/upload';\nimport createSchema from './schema/create';\nimport usersSchema from './schema/users';\nimport userSchema from './schema/user';\n\nconst PACKAGE = require('../package.json');\n\n/**\n * SDK for GitHub API\n *\n * @namespace GitHubSDK\n * @class\n * @param {string} token - github app token\n * @see https://developer.github.com/v3/\n */\nexport default class GitHubSDK {\n  /**\n   * Constructor, also save GitHub api token\n   * @param {string} token - github app token\n   */\n  constructor(token) {\n\n    Joi.validate(\n      token,\n      constructorSchema,\n      error => {\n        if (error !== null) throw error;\n      },\n    );\n\n    this.urls = {\n      api: 'https://api.github.com/',\n    };\n\n    this.headers = {\n      Authorization: `token ${token}`,\n      Accept: 'application/vnd.github.v3+json',\n      userAgent: `UserCrowler/${PACKAGE.version}`,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Uload file to repository\n   * @namespace GitHubSDK\n   * @method upload\n   *\n   * @throws {ValidationError}                    - Error of fields validation\n   * @throws {ErrorServerResponse}                - Server error\n   * @param  {Object}  props                      - upload props\n   * @param  {string}  props.owner                - organization or user name\n   * @param  {string}  props.repo                 - repository name\n   * @param  {string}  props.path                 - relative file path with file name in it\n   * @param  {string}  props.message              - commit message\n   * @param  {string}  props.content              - base64 encoded content\n   * @param  {string}  [props.branch='master']    - name of the branch\n   * @return {Promise<Content>}                   - uploaded content data\n   *\n   * @example <caption>Upload binary file</caption>\n   * import fs from 'fs';\n   * import GitHubSDK from '@frontender-magazine/github-sdk';\n   * (async()=>{\n   *   try {\n   *     const github = new GitHubSDK('b8f921864bd9a9fb6585b10e6534baa37c4d45fe');\n   *     const image = fs.readFileSync('/path/image.jpg', 'base64');\n   *     const content = await github.upload({\n   *       owner: 'FrontenderMagazine',\n   *       repo: 'article',\n   *       path: 'images/image.jpg',\n   *       message: 'Uploaded image.jpg',\n   *       content: image,\n   *     });\n   *   } catch (error) {\n   *     console.log(error.message);\n   *   }\n   * })();\n   *\n   * @example <caption>Upload text file</caption>\n   * import { Base64 } from 'js-base64';\n   * import GitHubSDK from '@frontender-magazine/github-sdk';\n   * (async()=>{\n   *   try {\n   *     const github = new GitHubSDK('b8f921864bd9a9fb6585b10e6534baa37c4d45fe');\n   *     const readme = Base64.btoa('# Title');\n   *     const content = await github.upload({\n   *       owner: 'FrontenderMagazine',\n   *       repo: 'article',\n   *       path: 'README.md',\n   *       message: 'Uploaded README.md',\n   *       content: readme,\n   *     });\n   *   } catch (error) {\n   *     console.log(error.message);\n   *   }\n   * })();\n   */\n  async upload(props) {\n\n    Joi.validate(\n      props,\n      uploadSchema,\n      error => {\n        if (error !== null) throw error;\n      },\n    );\n\n    const { owner, repo, path, message, content, branch } = props;\n\n    const options = {\n      method: 'PUT',\n      headers: this.headers,\n      body: JSON.stringify({\n        path,\n        message,\n        content,\n        branch,\n      }),\n    };\n\n    const url = `${this.urls.api}repos/${owner}/${repo}/contents/${path}`;\n    const response = await fetch(url, options);\n    let json;\n    try {\n      json = await response.json();\n    } catch (error) {\n      throw new ErrorServerResponse(response.status, response.statusText);\n    }\n    if (response.ok) return json;\n    throw new ErrorServerResponse(response.status, response.statusText, json);\n  }\n\n  /**\n   * Create repository in the organization\n   * @method create\n   *\n   * @throws {ValidationError}                        - Error of fields validation\n   * @throws {ErrorServerResponse}                    - Server error\n   * @param  {Object}  props                          - Options\n   * @param  {string}  props.name                     - Repository name\n   * @param  {string}  [props.description=null]       - Repository description\n   * @param  {string}  [props.homepage=null]          - Link to some related resourse\n   * @param  {string}  [props.org]                    - Organization name\n   * @return {Promise<Repository>}                    - Repository object\n   */\n  async create(props) {\n\n    Joi.validate(\n      props,\n      createSchema,\n      error => {\n        if (error !== null) throw error;\n      },\n    );\n\n    const { name, org, description, homepage } = props;\n\n    const options = {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name,\n        description,\n        homepage,\n      }),\n    };\n\n    const url = `${this.urls.api}orgs/${org}/repos`;\n    const response = await fetch(url, options);\n    let json;\n    try {\n      json = await response.json();\n    } catch (error) {\n      throw new ErrorServerResponse(response.status, response.statusText);\n    }\n    if (response.ok) return json;\n    throw new ErrorServerResponse(response.status, response.statusText, json);\n  }\n\n  /**\n   * Search for users\n   * @method searchForUsers\n   *\n   * @throws {ValidationError}     - Error of fields validation\n   * @throws {ErrorServerResponse} - Server error\n   * @param {Array<string>} keywordsList - Keywords array\n   * @return {Promise<Users>} - array of users\n   */\n  searchForUsers(keywordsList) {\n\n    Joi.validate(\n      keywordsList,\n      keywordsSchema,\n      error => {\n        if (error !== null) throw error;\n      },\n    );\n\n    const keywords =\n      !Array.isArray(keywordsList) && typeof keywordsList === 'string'\n        ? new Array(keywordsList)\n        : keywordsList;\n    const promises = keywords.map(keyword => this.searchForUser(keyword));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Search for user\n   * @method searchForUser\n   *\n   * @throws {ValidationError}     - Error of fields validation\n   * @throws {ErrorServerResponse} - Server error\n   * @param {String} keyword - login to search\n   * @return {Promise<User>} - user\n   */\n  async searchForUser(keyword) {\n\n    Joi.validate(\n      keyword,\n      usersSchema,\n      error => {\n        if (error !== null) throw error;\n      },\n    );\n\n    const options = {\n      method: 'GET',\n      headers: this.headers,\n    };\n\n    const url = `${this.urls.api}search/users?q=${encodeURIComponent(keyword)}`;\n    const response = await fetch(url, options);\n    let json;\n    try {\n      json = await response.json();\n    } catch (error) {\n      throw new ErrorServerResponse(response.status, response.statusText);\n    }\n    if (response.ok) return json;\n    throw new ErrorServerResponse(response.status, response.statusText, json);\n  }\n\n  /**\n   * Get user details\n   * @method getUser\n   *\n   * @throws {ValidationError}     - Error of fields validation\n   * @throws {ErrorServerResponse} - Server error\n   * @param {String}               - login\n   * @return {Promise<User>}       — user representation\n   */\n  async getUser(login) {\n\n    Joi.validate(\n      login,\n      userSchema,\n      error => {\n        if (error !== null) throw error;\n      },\n    );\n\n    const options = {\n      method: 'GET',\n      headers: this.headers,\n    };\n\n    const url = `${this.urls.api}users/${encodeURIComponent(login)}`;\n    const response = await fetch(url, options);\n    let json;\n    try {\n      json = await response.json();\n    } catch (error) {\n      throw new ErrorServerResponse(response.status, response.statusText);\n    }\n    if (response.ok) return json;\n    throw new ErrorServerResponse(response.status, response.statusText, json);\n  }\n\n  /**\n   * User object\n   *\n   * @namespace GitHubSDK\n   * @typedef {User} User representation\n   * @see https://developer.github.com/v3/users/#response\n   */\n\n  /**\n   * Content object\n   *\n   * @namespace GitHubSDK\n   * @typedef {Content} Content representation\n   * @see https://developer.github.com/v3/repos/contents/#response-2\n   */\n\n  /**\n   * Repository object\n   *\n   * @namespace GitHubSDK\n   * @typedef {Repository} Repository representation\n   * @see https://developer.github.com/v3/repos/#response-2\n   */\n}\n"]}